
class Pipeline(object):
    """
    Pipeline represents a chain of iterables that together can transform input 
    into output. The first iterable can be any iterable, other iterables, in 
    order to be chained (added to pipeline), need to have an attribute 
    'input_iterable'. Pipeline can be created like this: 

    Pipeline(iterable1) | iterable2 | iterable3
    
    Pipeline is iterable iteself and can be used in a for loop or any other 
    place iterable can be used. If a pipeline is used for side effect (like
    writing into a file or a DB) method run() can be used to run it.
    """

    def __init__(self, first_iterable=None, last_iterable=None):
        self.first_iterable = self.last_iterable = first_iterable

        if last_iterable:
            self.last_iterable = last_iterable

    def add(self, iterable):
        """ add an iterable to the pipeline
        
        Pipeline is immutable, add creates a new pipeline.
        """
        iterable.input_iterable = self.last_iterable
        return Pipeline(self.first_iterable, iterable)

    # Infix operator '|' can be used as a synonym for add
    __or__ = add

    def __iter__(self):
        return iter(self.last_iterable)

    def run(self):
        """ Iterate thorugh all the values and return the last one
       
        This is the method that can be used to run the pipeline if it used for 
        side effect, like writing into a file. In other cases and iterator should 
        be used to go through element generated by pipline.
        """
        v = None

        for i in iter(self.last_iterable):
            v = i

        return v 

iterate = Pipeline

